<div class="mb-3">
    <div class="btn-group btn-group-sm mr-2 mb-1">
        <div class="dropdown">
            <input class="btn btn-sm btn-light text-dark text-left rounded-left" style="border-radius:0" readonly @bind-value="value.Name" data-toggle="dropdown" placeholder="Добавить роль" />
            <div class="dropdown-menu bg-light p-0 border-0">
                <div class="d-flex flex-column">
                    @foreach (var item in itemsAll.OrderBy(i => i.Name))
                    {
                        <div class="btn btn-light text-dark text-left w-100" @onclick="()=>value=item">@item.Name</div>
                    }
                </div>
            </div>
        </div>
        <button class="btn btn-tertiary text-dark" @onclick="()=>add(value)"><i class="fas fa-plus"></i></button>
    </div>
    @foreach (var item in itemsSelected)
    {
        <div class="btn-group btn-group-sm mr-1 mb-1">
            <div class="bg-light text-dark rounded-left pl-2 pt-1 pr-2 pb-1 text-nowrap" style="cursor:default;">@item</div>
            <button class="btn btn-sm btn-tertiary text-dark" @onclick="()=>delete(item)"><i class="fas fa-times"></i></button>
        </div>
    }
</div>

@code {
    IdentityRole value = new IdentityRole();
    [Parameter]
    public List<IdentityRole> itemsAll { get; set; } = new List<IdentityRole>();
    [Parameter]
    public List<IdentityRole> itemsSelected { get; set; } = new List<IdentityRole>();
    [Parameter]
    public EventCallback<IdentityRole> itemAdded { get; set; }
    [Parameter]
    public EventCallback<IdentityRole> itemDeleted { get; set; }

    protected override void OnParametersSet()
    {
        foreach (var i in itemsSelected)
        {
            itemsAll.Remove(itemsAll.FirstOrDefault(r=>i.Name == r.Name));
        }
    }

    void add(IdentityRole item)
    {
        if (itemsAll.Contains(item) & !itemsSelected.Contains(item) & item!=null)
        {
            itemsSelected.Add(item);
            itemsAll.Remove(item);
            value = new IdentityRole();
            itemAdded.InvokeAsync(item);
        }
    }

    void delete(IdentityRole item)
    {
        itemsSelected.Remove(item);
        itemsAll.Add(item);
        itemDeleted.InvokeAsync(item);
    }
}